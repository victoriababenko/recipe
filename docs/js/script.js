
// === –ù–æ–≤–∏–Ω–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π ===
function loadNews() {
  const newsList = document.getElementById('news-list');
  if (!newsList) return;

  fetch('/api/news')
    .then(res => res.json())
    .then(newsArray => {
      newsList.innerHTML = '';
      newsArray.forEach(news => {
        const card = document.createElement('div');
        card.className = 'news-card';
        card.innerHTML = `
          <img src="${news.image}" alt="${news.title}">
          <div class="news-card-content">
            <h3>${news.title}</h3>
            <p>${news.text}</p>
            <a href="news.html?id=${news.id}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>
          </div>
        `;
        newsList.appendChild(card);
      });
    })
    .catch(err => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω:", err);
    });
}

function loadNewsDetail() {
  const id = new URLSearchParams(window.location.search).get('id');
  if (!id) return;

  const container = document.getElementById('news-detail');
  if (!container) return;

  fetch('/api/news')
    .then(res => res.json())
    .then(newsArray => {
      const news = newsArray.find(n => n.id == id);
      if (!news) {
        container.innerHTML = `<h2>–ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>`;
        return;
      }

      container.innerHTML = `
        <h2>${news.title}</h2>
        <img src="${news.image}" style="width:100%; border-radius:10px; margin-top:20px;">
        <p style="margin-top:20px; font-size:16px; line-height:1.6;">${news.fullText}</p>
      `;
    })
    .catch(err => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:", err);
      container.innerHTML = `<h2>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏</h2>`;
    });
}

function loadCategories() {
  const container = document.getElementById('category-buttons');
  if (!container) return;

  fetch('/api/categories')
    .then(res => res.json())
    .then(categories => {
      categories.forEach(category => {
        const btn = document.createElement('button');
        btn.textContent = category;
        btn.onclick = () => loadRecipes(category);
        container.appendChild(btn);
      });

      const allBtn = document.createElement('button');
      allBtn.textContent = "–£—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏";
      allBtn.onclick = () => loadRecipes(null);
      container.prepend(allBtn);
    });
}

function loadRecipes(category = null) {
  const container = document.getElementById('recipes-list');
  if (!container) return;

  fetch('/api/recipes')
    .then(res => res.json())
    .then(recipes => {
      container.innerHTML = '';

      const filtered = category
        ? recipes.filter(r => r.restrictions && r.restrictions.includes(category))
        : recipes;

      if (filtered.length === 0) {
        container.innerHTML = '<p>–ù–µ–º–∞—î —Ä–µ—Ü–µ–ø—Ç—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.</p>';
        return;
      }

      filtered.forEach(recipe => {
        const card = document.createElement('div');
        card.className = 'recipe-card';
        card.innerHTML = `
          <img src="${recipe.image || 'images/default.jpg'}" alt="${recipe.title}">
          <div class="recipe-card-content">
            <h3>${recipe.title}</h3>
            <p>${recipe.ingredients.substring(0, 60)}...</p>
            <a href="recipe.html?id=${recipe.id}">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>
          </div>
        `;
        container.appendChild(card);
      });
    });
}

function registerUser() {
  console.log("registerUser called");
  const form = document.getElementById('register-form');
  if (!form) return;

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    const username = form.elements['username'].value.trim();
    const password = form.elements['password'].value.trim();

    fetch('/api/users')
      .then(res => res.json())
      .then(users => {
        if (users.find(u => u.username === username)) {
          alert('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î');
          return;
        }

        fetch('/api/users', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password })
        }).then(() => {
          alert('–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è');
          window.location.href = 'login.html';
        });
      });
  });
}

function loginUser() {
  console.log("loginUser called");
  const form = document.getElementById('login-form');
  if (!form) return;

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    const username = form.elements['username'].value.trim();
const password = form.elements['password'].value.trim();

    fetch('/api/users')
      .then(res => res.json())
      .then(users => {
        const user = users.find(u => u.username === username && u.password === password);
        if (!user) {
          alert('–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å');
          return;
        }

        localStorage.setItem('user', JSON.stringify(user));
        alert('–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ');
        window.location.href = 'account.html';
      });
  });
}

function getCurrentUser() {
  return JSON.parse(localStorage.getItem('user'));
}

function checkAuth(required = false) {
  const user = JSON.parse(localStorage.getItem('user'));
  if (!user && required) {
    alert('–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç.');
    window.location.href = 'login.html';
  }
}
let isAddRecipeInitialized = false;
function handleAddRecipe() {
  if (isAddRecipeInitialized) return; // üõë –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
  isAddRecipeInitialized = true;
  const form = document.getElementById('add-recipe-form');
  if (!form) return;

  form.addEventListener('submit', (e) => {
    e.preventDefault();

    const title = document.getElementById('title').value.trim();
    const ingredients = document.getElementById('ingredients').value.trim();
    const instructions = document.getElementById('instructions').value.trim();
    const restrictionsInput = document.getElementById('restrictions').value.trim();
    const fileInput = document.getElementById('image');

    const user = getCurrentUser();
    if (!user) {
      alert('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É.');
      window.location.href = 'login.html';
      return;
    }

    const formData = new FormData();
    formData.append('title', title);
    formData.append('ingredients', ingredients);
    formData.append('instructions', instructions);
    formData.append('restrictions', restrictionsInput);
    formData.append('userId', user.id);

    if (fileInput && fileInput.files.length > 0) {
      formData.append('image', fileInput.files[0]);
    }

    fetch('/api/recipes', {
      method: 'POST',
      body: formData
    })
      .then(res => {
        if (!res.ok) throw new Error('Server error');
        return res.json();
      })
      .then(() => {
        alert('–†–µ—Ü–µ–ø—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!');
        window.location.href = 'recipes.html';
      })
      .catch(err => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É:', err);
        alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç');
      });
  });
}


function loadRecipeDetail() {
  const id = new URLSearchParams(window.location.search).get('id');
  if (!id) return;

  const container = document.getElementById('recipe-detail');
  if (!container) return;

  fetch('/api/recipes')
    .then(res => res.json())
    .then(recipes => {
      const recipe = recipes.find(r => r.id == id);
      if (!recipe) {
        container.innerHTML = '<h2>–†–µ—Ü–µ–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>';
        return;
      }

      container.innerHTML = `
        <h2>${recipe.title}</h2>
        <img src="${recipe.image || 'images/default.jpg'}" alt="${recipe.title}" style="width:100%; max-width:600px; margin:20px auto; display:block; border-radius:10px;">
        <h3>–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏</h3>
        <p>${recipe.ingredients.replace(/\n/g, '<br>')}</p>
        <h3>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó</h3>
        <p>${recipe.instructions.replace(/\n/g, '<br>')}</p>
        ${recipe.restrictions && recipe.restrictions.length > 0 ? `
          <h3>–•–∞—Ä—á–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è</h3>
          <ul>
            ${recipe.restrictions.map(r => `<li>${r}</li>`).join('')}
          </ul>
        ` : ''}
      `;
    })
    .catch(err => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É:', err);
      container.innerHTML = '<h2>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É</h2>';
    });
}
function renderUserNav() {
  const user = getCurrentUser();
  const nav = document.getElementById('nav-menu');
  const loginLink = document.getElementById('login-link');

  if (user && nav && loginLink) {
    loginLink.textContent = '–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å';
    loginLink.href = 'account.html';
  } else if (loginLink) {
    loginLink.textContent = '–í—Ö—ñ–¥';
    loginLink.href = 'login.html';
  }
}
function loadAccountPage() {
  const user = getCurrentUser();
  const section = document.getElementById('account-section');
  if (!user || !section) return;

  section.innerHTML = `
    <h2>–í—ñ—Ç–∞—î–º–æ, ${user.username}</h2>
    <div class="profile-info">
      <p><strong>–õ–æ–≥—ñ–Ω (email):</strong> ${user.username}</p>
    </div>
    <div class="profile-buttons" style="margin-top: 20px;">
      <button id="edit-profile">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</button>
      <button id="logout">–í–∏–π—Ç–∏</button>
    </div>
    <h3 style="margin-top:40px;">–ú–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏</h3>
    <div id="my-recipes"></div>
  `;

  document.getElementById('logout').addEventListener('click', () => {
    localStorage.removeItem('user');
    window.location.href = 'index.html';
  });

  document.getElementById('edit-profile').addEventListener('click', () => {
    section.innerHTML = `
      <h2>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é</h2>
      <form id="edit-profile-form" style="max-width:400px;">
        <label for="username">–ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω (email):</label>
        <input type="text" id="username" value="${user.username}" required>
        <button type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
      </form>
    `;

    document.getElementById('edit-profile-form').addEventListener('submit', (e) => {
      e.preventDefault();
      const newUsername = document.getElementById('username').value.trim();
      if (!newUsername) return;

      fetch(`/api/users/${user.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username: newUsername })
      })
        .then(res => {
          if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é');
          return res.json();
        })
        .then(updatedUser => {
          localStorage.setItem('user', JSON.stringify(updatedUser));
          alert('–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ');
          location.reload();
        })
        .catch(err => {
          console.error('–ü–æ–º–∏–ª–∫–∞:', err);
          alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å');
        });
    });
  });

  // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  fetch('/api/recipes')
    .then(res => res.json())
    .then(recipes => {
      const myRecipes = recipes.filter(r => String(r.userId) === String(user.id));
      const container = document.getElementById('my-recipes');

      if (!container) return;

      if (myRecipes.length === 0) {
        container.innerHTML = '<p>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ä–µ—Ü–µ–ø—Ç—ñ–≤.</p>';
      } else {
        container.innerHTML = myRecipes.map(r => `
          <div class="recipe-card" style="margin-bottom:20px; padding:10px; border:1px solid #ddd; border-radius:8px;">
            <h4>${r.title}</h4>
            <p>${r.ingredients.substring(0, 100)}...</p>
            <a href="recipe.html?id=${r.id}">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ—Ü–µ–ø—Ç</a>
          </div>
        `).join('');
      }
    })
    .catch(err => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ—ó—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤:', err);
    });
}

function searchRecipes() {
  const query = document.getElementById('search-input').value.trim().toLowerCase();
  const container = document.getElementById('recipes-list');
  if (!container) return;

  fetch('/api/recipes')
    .then(res => res.json())
    .then(recipes => {
      const filtered = recipes.filter(r =>
        r.title.toLowerCase().includes(query)
      );

      container.innerHTML = '';

      if (filtered.length === 0) {
        container.innerHTML = '<p>–ù–µ–º–∞—î —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.</p>';
        return;
      }

      filtered.forEach(recipe => {
        const card = document.createElement('div');
        card.className = 'recipe-card';
        card.innerHTML = `
          <img src="${recipe.image || 'images/default.jpg'}" alt="${recipe.title}">
          <div class="recipe-card-content">
            <h3>${recipe.title}</h3>
            <p>${recipe.ingredients.substring(0, 60)}...</p>
            <a href="recipe.html?id=${recipe.id}">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>
          </div>
        `;
        container.appendChild(card);
      });
    })
    .catch(err => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤:', err);
    });
}


function checkAuthRender(containerId) {
  const user = getCurrentUser();
  if (user) return true;

  const container = document.getElementById(containerId);
  if (container) {
    container.innerHTML = `
      <div style="text-align:center; margin-top: 50px;">
        <p style="font-size: 18px; color: #444;">–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç.</p>
        <a href="login.html">
          <button style="
            padding: 12px 24px;
            background: linear-gradient(90deg, #ff8a00, #e52e71);
            border: none;
            border-radius: 10px;
            color: white;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
          ">–£–≤—ñ–π—Ç–∏</button>
        </a>
      </div>
    `;
  }

  return false;
}
 
document.addEventListener('DOMContentLoaded', () => {
  renderUserNav();
  const path = window.location.pathname;

  // === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ "–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"
  if (path.includes('account.html')) {
    checkAuth(true);
    loadAccountPage();
  }

  // === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ "–î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"
  if (path.includes('add-recipe.html')) {
    const allowed = checkAuthRender('auth-check-container');
    if (allowed) {
      document.getElementById('add-recipe-form').style.display = 'block';
      handleAddRecipe();
    }
    return; // —ñ–Ω—à—ñ load-—Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
  }

  // === –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  loadNews();
  loadNewsDetail();
  loadCategories();
  loadRecipes();
  loginUser();
  registerUser();
  loadRecipeDetail();
});
